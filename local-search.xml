<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2021/03/08/MySQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/08/MySQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h1><p><strong>基于<a href="https://www.bilibili.com/video/BV12b411K7Zu">尚硅谷MySQL视频</a>的学习笔记</strong></p><h2 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1. 初识MySQL"></a>1. 初识MySQL</h2><h3 id="1-1-数据库相关概念"><a href="#1-1-数据库相关概念" class="headerlink" title="1.1 数据库相关概念"></a>1.1 数据库相关概念</h3><ul><li>数据库的常见概念 ★<br>1、DB：数据库，存储数据的容器<br>2、DBMS：数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理DB<br>3、SQL：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</li><li>数据库存储数据的特点<br>1、数据存放到表中，然后表再放到库中<br>2、一个库中可以有多张表，每张表具有唯一的表名用来标识自己<br>3、表中有一个或多个列，<strong>列</strong>又称为“<strong>字段</strong>”，相当于java中“<strong>属性</strong>”<br>4、表中的<strong>每一行数据</strong>，相当于java中“<strong>对象</strong>”</li></ul><ul><li>常见的数据库管理系统<br>mysql、oracle、db2、sqlserver</li></ul><h3 id="1-2-MySQL介绍"><a href="#1-2-MySQL介绍" class="headerlink" title="1.2 MySQL介绍"></a>1.2 MySQL介绍</h3><ul><li><p>MySQL的背景<br>前身属于瑞典的一家公司，MySQL AB<br>08年被sun公司收购<br>09年sun被oracle收购</p></li><li><p>MySQL的优点</p><ul><li>开源、免费、成本低</li><li>性能高、移植性也好</li><li>体积小，便于安装</li></ul></li><li><p>MySQL服务的启动和停止</p><ul><li>方式一：通过命令行<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> 服务名<br><span class="hljs-built_in">net</span> stop 服务名<br></code></pre></td></tr></table></figure></li><li>方式二：计算机——右击——管理——服务</li></ul></li></ul><ul><li><p>MySQL服务的登录和退出</p><ul><li><p>登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql 【-h 主机名 -P 端口号】 -u 用户名 -p密码<br></code></pre></td></tr></table></figure></li><li><p>退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">exit 或 ctrl+C<br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>MySQL的常见命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.查看当前所有的数据库<br>show databases;<br># 2.打开指定的库<br>use 库名<br># 3.查看当前库的所有表<br>show tables;<br># 4.查看其它库的所有表<br>show tables from 库名;<br># 5.创建表<br>create table 表名(<br>列名 列类型,<br>列名 列类型，<br>...<br>);<br># 6.查看表结构<br>desc 表名;<br># 7.查看服务器的版本<br># 方式一：登录到mysql服务端<br>select version();<br># 方式二：没有登录到mysql服务端<br>mysql --version<br># 或<br>mysql --V<br></code></pre></td></tr></table></figure></li><li><p>MySQL的语法规范</p><ol><li><p>不区分大小写,但建议关键字大写，表名、列名小写</p></li><li><p>每条命令最好用分号结尾</p></li><li><p>每条命令根据需要，可以进行缩进 或换行</p></li><li><p>注释</p><ul><li><p>单行注释：#注释文字</p></li><li><p>单行注释：– 注释文字</p></li><li><p>多行注释：/* 注释文字  */</p></li></ul></li></ol></li><li><p>SQL的语言分类</p><ul><li>DQL（Data Query Language）：数据查询语言<pre><code>    select </code></pre></li><li>DML(Data Manipulate Language):数据操作语言<pre><code>    insert 、update、delete</code></pre></li><li>DDL（Data Define Languge）：数据定义语言<pre><code>    create、drop、alter</code></pre></li><li>TCL（Transaction Control Language）：事务控制语言<pre><code>    commit、rollback</code></pre></li></ul></li></ul><h2 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2. DQL语言"></a>2. DQL语言</h2><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1 基础查询"></a>2.1 基础查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、查询单个字段<br>select 字段名 from 表名;<br><br># 2、查询多个字段<br>select 字段名，字段名 from 表名;<br><br># 3、查询所有字段<br>select * from 表名;<br><br># 4、查询常量<br># 注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要<br>select 常量值;<br><br># 5、查询函数<br>select 函数名(实参列表);<br><br># 6、查询表达式<br>select 100&#x2F;1234;<br><br># 7、起别名<br># ① as<br># ② 空格<br><br># 8、去重<br>select distinct 字段名 from 表名;<br><br># 9、+<br># 作用：做加法运算<br>select 数值+数值;  # 直接运算<br>select 字符+数值;  # 先试图将字符转换成数值，如果转换成功，则继续运算；否则转换成0，再做运算<br>select null+值;  # 结果都为null<br><br># 10、【补充】concat函数<br># 功能：拼接字符<br>select concat(字符1，字符2，字符3,...);<br><br># 11、【补充】ifnull函数<br># 功能：判断某字段或表达式是否为null，如果为null 返回指定的值，否则返回原本的值<br>select ifnull(commission_pct,0) from employees;<br><br># 12、【补充】isnull函数<br># 功能：判断某字段或表达式是否为null，如果是，则返回1，否则返回0<br></code></pre></td></tr></table></figure><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.条件查询的基本结构<br>select 查询列表 from 表名 where 筛选条件<br><br># 2.简单条件运算符<br>&gt; &lt; &#x3D; &lt;&gt; !&#x3D; &gt;&#x3D; &lt;&#x3D;  <br>&lt;&#x3D;&gt;安全等于 # 可以判断null值<br><br># 3. 逻辑运算符<br>&amp;&amp; and<br>|| or<br>!  not<br><br># 4、模糊查询<br>between and # 左右边界不能颠倒顺序<br>between 120 and 100 # 等价于 &gt;&#x3D; 120 &amp;&amp; &lt;&#x3D; 100 <br><br>in (&#39;&#39;, &#39;&#39;) # in列表值类型必须统一,且不支持通配符<br>is null &#x2F;is not null  # 用于判断null值, &#x3D; 不能判断null<br>like  # 一般搭配通配符使用，可以判断字符型或数值型 <br><br># 5.通配符：<br>%：任意多个字符<br>_：任意单个字符<br>通配符转义 \ 或者 &#39;_$_&#39; ESCAPE &#39;$&#39;<br><br><br>普通类型的数值  null值   可读性<br>is null×   √      √<br>&lt;&#x3D;&gt;    √   √      ×<br></code></pre></td></tr></table></figure><p><font color=#FF0000><strong>经典面试题</strong></font> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from employees;<br>select * from employees where name like &#39;%%&#39; and id like &#39;%%&#39;;<br>两个查询语句的执行结果是否相同？<br>解：不一样，若name或者id有null值则查不出来<br></code></pre></td></tr></table></figure><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 排序查询的基本结构<br>select 查询列表<br>from 表<br>where 筛选条件<br>order by 排序列表 [asc&#125;desc]<br><br># 2. 特点<br>&#x2F;*<br>1、asc ：升序，如果不写默认升序<br>   desc：降序<br>2、排序列表 支持 单个字段、多个字段、函数、表达式、别名<br>3、order by的位置一般放在查询语句的最后（除limit语句之外）<br>*&#x2F;<br></code></pre></td></tr></table></figure><h3 id="2-4-常见函数"><a href="#2-4-常见函数" class="headerlink" title="2.4 常见函数"></a>2.4 常见函数</h3><ul><li>功能：类似于java中的方法</li><li>好处：提高重用性和隐藏实现细节</li><li>调用：select 函数名(实参列表);</li></ul><p>单行函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、字符函数<br># concat:连接<br># substr:截取子串，索引从1开始<br># upper:变大写<br># lower：变小写<br># replace：替换<br># length：获取字节长度<br># trim:去前后空格<br># lpad：左填充<br># rpad：右填充<br># instr:获取子串第一次出现的索引<br><br>SELECT LENGTH(&#39;john&#39;);<br>SELECT CONCAT(last_name,&#39;_&#39;,first_name) 姓名 FROM employees;<br>SELECT UPPER(&#39;john&#39;);<br>SELECT LOWER(&#39;joHn&#39;);<br>SELECT <br>CONCAT(UPPER(last_name),LOWER(first_name))  姓名 <br>FROM employees;<br>SELECT SUBSTR(&#39;李莫愁爱上了陆展元&#39;,7)  out_put;<br>SELECT SUBSTR(&#39;李莫愁爱上了陆展元&#39;,1,3) out_put;<br>SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2)))  out_put<br>FROM employees;<br>SELECT INSTR(&#39;杨不殷六侠悔爱上了殷六侠&#39;,&#39;殷八侠&#39;) AS out_put;<br>SELECT LENGTH(TRIM(&#39;    张翠山    &#39;)) AS out_put;<br>SELECT TRIM(&#39;aa&#39; FROM &#39;aaaaaa张aaaa翠山aaaaa&#39;) AS out_put;<br>SELECT LPAD(&#39;殷素素&#39;,2,&#39;*&#39;) AS out_put;<br>SELECT RPAD(&#39;殷素素&#39;,12,&#39;ab&#39;) AS out_put;<br>SELECT REPLACE(&#39;周芷若周芷若张无忌爱上了周芷若&#39;,&#39;周芷若&#39;,&#39;赵敏&#39;) AS out_put;<br><br># 2、数学函数<br># ceil:向上取整<br># round：四舍五入<br># mod:取模<br># floor：向下取整<br># truncate:截断<br># rand:获取随机数，返回0-1之间的小数<br>SELECT ROUND(-1.55);<br>SELECT ROUND(1.567,2);<br>SELECT CEIL(-1.02);<br>SELECT FLOOR(-9.99);<br>SELECT TRUNCATE(1.69999,1);<br>#mod取余<br>&#x2F;*<br>mod(a,b) ：  a-a&#x2F;b*b<br>mod(-10,-3):-10- (-10)&#x2F;(-3)*（-3）&#x3D;-1<br>*&#x2F;<br>SELECT MOD(10,-3);<br>SELECT 10%3;<br><br># 3、日期函数<br># now：返回当前日期+时间<br># year:返回年<br># month：返回月<br># day:返回日<br># date_format:将日期转换成字符<br># curdate:返回当前日期<br># str_to_date:将字符转换成日期<br># curtime：返回当前时间<br># hour:小时<br># minute:分钟<br># second：秒<br># datediff:返回两个日期相差的天数<br># monthname:以英文形式返回月<br>SELECT NOW();<br>SELECT CURDATE();<br>SELECT CURTIME();<br>SELECT YEAR(NOW()) 年;<br>SELECT YEAR(&#39;1998-1-1&#39;) 年;<br>SELECT  YEAR(hiredate) 年 FROM employees;<br>SELECT MONTH(NOW()) 月;<br>SELECT MONTHNAME(NOW()) 月;<br>SELECT STR_TO_DATE(&#39;1998-3-2&#39;,&#39;%Y-%c-%d&#39;) AS out_put;<br>#查询入职日期为1992--4-3的员工信息<br>SELECT * FROM employees WHERE hiredate &#x3D; &#39;1992-4-3&#39;;<br>SELECT * FROM employees WHERE hiredate &#x3D; STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);<br>SELECT DATE_FORMAT(NOW(),&#39;%y年%m月%d日&#39;) AS out_put;<br>#查询有奖金的员工名和入职日期(xx月&#x2F;xx日 xx年)<br>SELECT last_name,DATE_FORMAT(hiredate,&#39;%m月&#x2F;%d日 %y年&#39;) 入职日期<br>FROM employees<br>WHERE commission_pct IS NOT NULL;<br><br># 4、其他函数<br># version 当前数据库服务器的版本<br># database 当前打开的数据库<br># user当前用户<br># password(&#39;字符&#39;)：返回该字符的密码形式<br># md5(&#39;字符&#39;):返回该字符的md5加密形式<br>SELECT VERSION();<br>SELECT DATABASE();<br>SELECT USER();<br><br>#5、流程控制函数<br>&#x2F;*<br>①if(条件表达式，表达式1，表达式2)：如果条件表达式成立，返回表达式1，否则返回表达式2<br>②case情况1<br>case 变量或表达式或字段<br>when 常量1 then 值1<br>when 常量2 then 值2<br>...<br>else 值n<br>end<br><br>③case情况2<br>case <br>when 条件1 then 值1<br>when 条件2 then 值2<br>...<br>else 值n<br>end<br>*&#x2F;<br>SELECT IF(10&lt;5,&#39;大&#39;,&#39;小&#39;);<br><br>SELECT salary 原始工资,department_id,<br>CASE department_id<br>WHEN 30 THEN salary*1.1<br>WHEN 40 THEN salary*1.2<br>WHEN 50 THEN salary*1.3<br>ELSE salary<br>END AS 新工资<br>FROM employees;<br><br>SELECT salary,<br>CASE <br>WHEN salary&gt;20000 THEN &#39;A&#39;<br>WHEN salary&gt;15000 THEN &#39;B&#39;<br>WHEN salary&gt;10000 THEN &#39;C&#39;<br>ELSE &#39;D&#39;<br>END AS 工资级别<br>FROM employees;<br></code></pre></td></tr></table></figure><p>分组函数(统计函数\聚合函数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.分类<br>max 最大值<br>min 最小值<br>sum 和<br>avg 平均值<br>count 计算个数<br><br># 2.简单 的使用<br>SELECT SUM(salary) FROM employees;<br>SELECT AVG(salary) FROM employees;<br>SELECT MIN(salary) FROM employees;<br>SELECT MAX(salary) FROM employees;<br>SELECT COUNT(salary) FROM employees;<br><br><br>SELECT SUM(salary) 和,AVG(salary) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数<br>FROM employees;<br><br>SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数<br>FROM employees;<br><br># 3、参数支持哪些类型<br># sum和avg一般用于处理数值型<br># max、min、count可以处理任何数据类型<br>SELECT SUM(last_name) ,AVG(last_name) FROM employees;<br>SELECT SUM(hiredate) ,AVG(hiredate) FROM employees;<br>SELECT MAX(last_name),MIN(last_name) FROM employees;<br>SELECT MAX(hiredate),MIN(hiredate) FROM employees;<br>SELECT COUNT(commission_pct) FROM employees;<br>SELECT COUNT(last_name) FROM employees;<br><br># 4、是否忽略null(以上分组函数都忽略)<br>SELECT SUM(commission_pct) ,AVG(commission_pct),SUM(commission_pct)&#x2F;35,SUM(commission_pct)&#x2F;107 FROM employees;<br><br>SELECT MAX(commission_pct) ,MIN(commission_pct) FROM employees;<br><br>SELECT COUNT(commission_pct) FROM employees;<br>SELECT commission_pct FROM employees;<br><br># 5、和distinct搭配<br>SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;<br>SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;<br><br># 6、count函数的详细介绍<br>count(字段)：统计该字段非空值的个数<br>count(*):统计结果集的行数<br>SELECT COUNT(salary) FROM employees;<br>SELECT COUNT(*) FROM employees;<br>SELECT COUNT(1) FROM employees;<br><br>效率：<br>MYISAM存储引擎下  ，COUNT(*)的效率高<br>INNODB存储引擎下，COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些<br><br>#6、和分组函数一同查询的字段有限制,要求是group by后出现的字段<br>SELECT AVG(salary),employee_id  FROM employees; # 这个查询没有意义<br></code></pre></td></tr></table></figure><h3 id="2-5-分组查询"><a href="#2-5-分组查询" class="headerlink" title="2.5 分组查询"></a>2.5 分组查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.分组查询的基本结构<br>select 分组函数，分组后的字段<br>from 表<br>[where 筛选条件]<br>group by 分组的字段<br>[having 分组后的筛选]<br>[order by 排序列表]<br><br># 2.筛选对比<br>使用关键字筛选的表位置<br>分组前筛选where原始表 group by的前面<br>分组后筛选having分组后的结果   group by 的后面<br><br># 3. 常见问题<br>1：分组函数做筛选能不能放在where后面<br>答：不能<br><br>2：where——group by——having<br>答：一般来讲，能用分组前筛选的，尽量使用分组前筛选，提高效率<br><br>3、分组可以按单个字段也可以按多个字段<br>4、可以搭配着排序使用<br><br># 4. 一些示例<br>#案例1：查询每个工种的员工平均工资<br>SELECT AVG(salary),job_id<br>FROM employees<br>GROUP BY job_id;<br>#案例2：每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资<br>SELECT job_id,MAX(salary)<br>FROM employees<br>WHERE commission_pct IS NOT NULL<br>GROUP BY job_id<br>HAVING MAX(salary)&gt;12000;<br>#案例3：每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序<br>SELECT job_id,MAX(salary) m<br>FROM employees<br>WHERE commission_pct IS NOT NULL<br>GROUP BY job_id<br>HAVING m&gt;6000<br>ORDER BY m ;<br>#案例4：查询每个工种每个部门的最低工资,并按最低工资降序<br>SELECT MIN(salary),job_id,department_id<br>FROM employees<br>GROUP BY department_id,job_id<br>ORDER BY MIN(salary) DESC;<br></code></pre></td></tr></table></figure><h3 id="2-6-连接查询"><a href="#2-6-连接查询" class="headerlink" title="2.6 连接查询"></a>2.6 连接查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.连接查询的含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询<br>    笛卡尔乘积现象：表1 有m行，表2有n行，结果&#x3D;m*n行<br>    发生原因：没有有效的连接条件<br>    如何避免：添加有效的连接条件<br><br># 2.分类：<br># 按年代分类：<br>sql92标准:仅仅支持内连接<br>sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接<br><br># 按功能分类：<br>内连接：<br>等值连接<br>非等值连接<br>自连接<br>外连接：<br>左外连接<br>右外连接<br>全外连接<br><br>交叉连接<br><br># 3. SQL92语法<br># 等值连接<br>select 查询列表<br>from 表1 别名,表2 别名<br>where 表1.key&#x3D;表2.key<br>【and 筛选条件】<br>【group by 分组字段】<br>【having 分组后的筛选】<br>【order by 排序字段】<br><br>① 一般为表起别名<br>② 多表的顺序可以调换<br>③ n表连接至少需要n-1个连接条件<br>④ 等值连接的结果是多表的交集部分<br><br><br># 非等值连接<br>select 查询列表<br>from 表1 别名,表2 别名<br>where 非等值的连接条件<br>【and 筛选条件】<br>【group by 分组字段】<br>【having 分组后的筛选】<br>【order by 排序字段】<br><br># 自连接<br>select 查询列表<br>from 表 别名1,表 别名2<br>where 等值的连接条件<br>【and 筛选条件】<br>【group by 分组字段】<br>【having 分组后的筛选】<br>【order by 排序字段】<br><br><br># 4.SQL99语法<br>    # 内连接<br>    - 语法：<br>    select 查询列表<br>    from 表1 别名<br>    【inner】 join 表2 别名 on 连接条件<br>    where 筛选条件<br>    group by 分组列表<br>    having 分组后的筛选<br>    order by 排序列表<br>    limit 子句;<br>    - 特点：<br>    ① 表的顺序可以调换<br>    ② 内连接的结果&#x3D;多表的交集<br>    ③ n表连接至少需要n-1个连接条件<br>    - 分类：<br>    等值连接<br>    非等值连接<br>    自连接<br><br>    # 外连接<br>    - 语法：<br>    select 查询列表<br>    from 表1 别名<br>    left|right|full【outer】 join 表2 别名 on 连接条件<br>    where 筛选条件<br>    group by 分组列表<br>    having 分组后的筛选<br>    order by 排序列表<br>    limit 子句;<br>    - 特点：<br>    ① 查询的结果&#x3D;主表中所有的行，如果从表和它匹配的将显示匹配行，如果从表没有匹配的则显示null<br>    ② left join 左边的就是主表<br>      right join 右边的就是主表<br>      full join 两边都是主表<br>    ③ 一般用于查询除了交集部分的剩余的不匹配的行<br><br>    # 交叉连接<br>    - 语法：<br>    select 查询列表<br>    from 表1 别名<br>    cross join 表2 别名;<br>    - 特点：<br>    类似于笛卡尔乘积<br></code></pre></td></tr></table></figure><h3 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 子查询的含义<br>出现在其他语句中的select语句，称为子查询或内查询<br>外部的查询语句，称为主查询或外查询<br><br># 2. 分类：<br>    # 按子查询出现的位置：<br>        select后面：<br>            仅仅支持标量子查询<br><br>        from后面：<br>            支持表子查询<br>        where或having后面：★<br>            标量子查询（单行） √<br>            列子查询  （多行） √<br>            行子查询<br><br>        exists后面（相关子查询）<br>            表子查询<br><br>    # 按结果集的行列数不同：<br>        标量子查询（结果集只有一行一列）<br>        列子查询（结果集只有一列多行）<br>        行子查询（结果集有一行多列）<br>        表子查询（结果集一般为多行多列）<br><br># 3. 示例<br># 3.1 where或having后面<br>特点：<br>① 子查询放在小括号内<br>② 子查询一般放在条件的右侧<br>③ 标量子查询，一般搭配着单行操作符使用<br>&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; &lt;&gt;<br>列子查询，一般搭配着多行操作符使用<br>in、any&#x2F;some、all<br><br>④ 子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果<br><br>    # 标量子查询<br>    案例：查询最低工资的员工姓名和工资<br>    ① 最低工资<br>    select min(salary) from employees<br>    ② 查询员工的姓名和工资，要求工资&#x3D;①<br>    select last_name,salary<br>    from employees<br>    where salary&#x3D;(<br>        select min(salary) from employees<br>    );<br><br>    # 列子查询 ★<br>    案例：查询所有是领导的员工姓名<br>    ① 查询所有员工的 manager_id<br>    select manager_id<br>    from employees<br>    ② 查询姓名，employee_id属于①列表的一个<br>    select last_name<br>    from employees<br>    where employee_id in(<br>        select manager_id<br>        from employees<br>    );<br>    <br>    # 行子查询（了解）<br>案例：查询员工编号最小并且工资最高的员工信息<br>    SELECT * <br>    FROM employees<br>    WHERE (employee_id,salary)&#x3D;(<br>        SELECT MIN(employee_id),MAX(salary)<br>        FROM employees<br>    );<br>    ① 查询最小的员工编号<br>    SELECT MIN(employee_id)<br>    FROM employees<br>② 查询最高工资<br>    SELECT MAX(salary)<br>    FROM employees<br>    ③ 查询员工信息<br>    SELECT *<br>    FROM employees<br>    WHERE employee_id&#x3D;(<br>        SELECT MIN(employee_id)<br>        FROM employees<br>    )AND salary&#x3D;(<br>        SELECT MAX(salary)<br>        FROM employees<br>    );<br>    <br># 3.2 select后面<br>仅仅支持标量子查询<br>    #案例：查询每个部门的员工个数<br>    SELECT d.*,(<br>        SELECT COUNT(*)<br>        FROM employees e<br>        WHERE e.department_id &#x3D; d.&#96;department_id&#96;<br>     ) 个数<br>     FROM departments d;<br><br><br># 3.3 from后面<br>将子查询结果充当一张表，要求必须起别名<br>    #案例：查询每个部门的平均工资的工资等级<br>    ① 查询每个部门的平均工资<br>    SELECT AVG(salary),department_id<br>    FROM employees<br>    GROUP BY department_id<br>    SELECT * FROM job_grades;<br><br>    ② 连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_sal<br>    SELECT  ag_dep.*,g.&#96;grade_level&#96;<br>    FROM (<br>        SELECT AVG(salary) ag,department_id<br>        FROM employees<br>        GROUP BY department_id<br>    ) ag_dep<br>    INNER JOIN job_grades g<br>    ON ag_dep.ag BETWEEN lowest_sal AND highest_sal;<br><br><br># 3.4 exists后面（相关子查询）<br>语法：<br>exists(完整的查询语句)<br>结果：<br>1或0<br><br>SELECT EXISTS(SELECT employee_id FROM employees WHERE salary&#x3D;300000);<br><br>    #案例：查询有员工的部门名<br>    #in<br>    SELECT department_name<br>    FROM departments d<br>    WHERE d.&#96;department_id&#96; IN(<br>        SELECT department_id<br>        FROM employees<br>    )<br>    #exists<br>    SELECT department_name<br>    FROM departments d<br>    WHERE EXISTS(<br>        SELECT *<br>        FROM employees e<br>        WHERE d.&#96;department_id&#96;&#x3D;e.&#96;department_id&#96;<br>    );<br></code></pre></td></tr></table></figure><h3 id="2-8-分页查询"><a href="#2-8-分页查询" class="headerlink" title="2.8 分页查询"></a>2.8 分页查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 分页查询<br>select 查询列表<br>from 表<br>[join type join 表2<br>on 连接条件<br>where 筛选条件<br>group by 分组字段<br>having 分组后的筛选<br>order by 排序的字段]<br>limit [offset，] size;<br><br># 2. 注意<br>offset代表的是起始的条目索引，默认从0开始<br>size代表的是显示的条目数<br><br># 3. 公式<br>假如要显示的页数为page，每一页条目数为size<br>select 查询列表<br>from 表<br>limit (page-1)*size,size;<br></code></pre></td></tr></table></figure><h3 id="2-9-联合查询"><a href="#2-9-联合查询" class="headerlink" title="2.9 联合查询"></a>2.9 联合查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 联合查询: 将多条查询语句的结果合并成一个结果<br>查询语句1<br>union<br>查询语句2<br>union<br>...<br><br># 2. 应用场景：<br>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时<br><br># 3. 特点：★<br>3.1 要求多条查询语句的查询列数是一致的！<br>3.2 要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3.3 union关键字默认去重，如果使用union all 可以包含重复项<br><br># 4.案例：查询部门编号&gt;90或邮箱包含a的员工信息<br>SELECT * FROM employees WHERE email LIKE &#39;%a%&#39; OR department_id&gt;90;;<br>SELECT * FROM employees  WHERE email LIKE &#39;%a%&#39;<br>UNION<br>SELECT * FROM employees  WHERE department_id&gt;90;<br></code></pre></td></tr></table></figure><h3 id="2-10-查询语句总结"><a href="#2-10-查询语句总结" class="headerlink" title="2.10 查询语句总结"></a>2.10 查询语句总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法以及执行顺序<br>select 查询列表    ⑦<br>from 表1 别名       ①<br>连接类型 join 表2   ②<br>on 连接条件         ③<br>where 筛选          ④<br>group by 分组列表   ⑤<br>having 筛选         ⑥<br>order by排序列表    ⑧<br>limit 起始条目索引，条目数;  ⑨<br></code></pre></td></tr></table></figure><h2 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3. DML语言"></a>3. DML语言</h2><blockquote><p>数据操作语言：</p><p>插入：insert</p><p>修改：update</p><p>删除：delete</p></blockquote><h3 id="3-1-插入语句"><a href="#3-1-插入语句" class="headerlink" title="3.1 插入语句"></a>3.1 插入语句</h3><p>方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法<br>insert into 表名(列名) values(值1,...);<br><br># 1.插入的值的类型要与列的类型一致或兼容<br>INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)<br>VALUES(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,NULL,2);<br><br># 2.不可以为null的列必须插入值。可以为null的列如何插入值？<br># 2.1：<br>INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)<br>VALUES(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,NULL,2);<br># 2.2：<br>INSERT INTO beauty(id,NAME,sex,phone)<br>VALUES(15,&#39;娜扎&#39;,&#39;女&#39;,&#39;1388888888&#39;);<br><br># 3.列的顺序是否可以调换<br>INSERT INTO beauty(NAME,sex,id,phone)<br>VALUES(&#39;蒋欣&#39;,&#39;女&#39;,16,&#39;110&#39;);<br><br># 4.列数和值的个数必须一致<br>INSERT INTO beauty(NAME,sex,id,phone)<br>VALUES(&#39;关晓彤&#39;,&#39;女&#39;,17,&#39;110&#39;);<br><br># 5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致<br>INSERT INTO beauty<br>VALUES(18,&#39;张飞&#39;,&#39;男&#39;,NULL,&#39;119&#39;,NULL,NULL);<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>insert into 表名<br>set 列名&#x3D;值,列名&#x3D;值,...<br><br># 示例<br>INSERT INTO beauty<br>SET id&#x3D;19, NAME&#x3D;&#39;刘涛&#39;, phone&#x3D;&#39;999&#39;;<br></code></pre></td></tr></table></figure><p>对比两种方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、方式一支持插入多行,方式二不支持<br>INSERT INTO beauty<br>VALUES(23,&#39;唐艺昕1&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,NULL,2)<br>,(24,&#39;唐艺昕2&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,NULL,2)<br>,(25,&#39;唐艺昕3&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,NULL,2);<br><br># 2、方式一支持子查询，方式二不支持<br>INSERT INTO beauty(id,NAME,phone)<br>SELECT 26,&#39;宋茜&#39;,&#39;11809866&#39;;<br><br>INSERT INTO beauty(id,NAME,phone)<br>SELECT id,boyname,&#39;1234567&#39;<br>FROM boys WHERE id&lt;3;<br></code></pre></td></tr></table></figure><h3 id="3-2-修改语句"><a href="#3-2-修改语句" class="headerlink" title="3.2 修改语句"></a>3.2 修改语句</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.修改单表的记录★<br>update 表名<br>set 列&#x3D;新值,列&#x3D;新值,...<br>where 筛选条件;<br><br># 2.修改多表的记录【补充】<br># sql92语法：<br>update 表1 别名,表2 别名<br>set 列&#x3D;值,...<br>where 连接条件<br>and 筛选条件;<br># sql99语法：<br>update 表1 别名<br>inner|left|right join 表2 别名<br>on 连接条件<br>set 列&#x3D;值,...<br>where 筛选条件;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1.修改单表的记录<br>#案例1：修改beauty表中姓唐的女神的电话为13899888899<br>UPDATE beauty SET phone &#x3D; &#39;13899888899&#39;<br>WHERE NAME LIKE &#39;唐%&#39;;<br>#案例2：修改boys表中id好为2的名称为张飞，魅力值 10<br>UPDATE boys SET boyname&#x3D;&#39;张飞&#39;,usercp&#x3D;10<br>WHERE id&#x3D;2;<br><br>#2.修改多表的记录<br>#案例 1：修改张无忌的女朋友的手机号为114<br>UPDATE boys bo<br>INNER JOIN beauty b ON bo.&#96;id&#96;&#x3D;b.&#96;boyfriend_id&#96;<br>SET b.&#96;phone&#96;&#x3D;&#39;119&#39;,bo.&#96;userCP&#96;&#x3D;1000<br>WHERE bo.&#96;boyName&#96;&#x3D;&#39;张无忌&#39;;<br>#案例2：修改没有男朋友的女神的男朋友编号都为2号<br>UPDATE boys bo<br>RIGHT JOIN beauty b ON bo.&#96;id&#96;&#x3D;b.&#96;boyfriend_id&#96;<br>SET b.&#96;boyfriend_id&#96;&#x3D;2<br>WHERE bo.&#96;id&#96; IS NULL;<br>SELECT * FROM boys;<br></code></pre></td></tr></table></figure><h3 id="3-3-删除语句"><a href="#3-3-删除语句" class="headerlink" title="3.3 删除语句"></a>3.3 删除语句</h3><p> 方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、单表的删除【★】<br>delete from 表名 where 筛选条件<br><br># 2、多表的删除【补充】<br># sql92语法：<br>delete 表1的别名,表2的别名<br>from 表1 别名,表2 别名<br>where 连接条件<br>and 筛选条件;<br># sql99语法：<br>delete 表1的别名,表2的别名<br>from 表1 别名<br>inner|left|right join 表2 别名 on 连接条件<br>where 筛选条件;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.单表的删除<br># 案例：删除手机号以9结尾的女神信息<br>DELETE FROM beauty WHERE phone LIKE &#39;%9&#39;;<br><br># 2.多表的删除<br># 案例：删除张无忌的女朋友的信息<br>DELETE b<br>FROM beauty b<br>INNER JOIN boys bo ON b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96;<br>WHERE bo.&#96;boyName&#96;&#x3D;&#39;张无忌&#39;;<br># 案例：删除黄晓明的信息以及他女朋友的信息<br>DELETE b,bo<br>FROM beauty b<br>INNER JOIN boys bo ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;<br>WHERE bo.&#96;boyName&#96;&#x3D;&#39;黄晓明&#39;;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>truncate table 表名;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#案例：将魅力值&gt;100的男神信息删除<br>TRUNCATE TABLE boys ;<br></code></pre></td></tr></table></figure><p><font color=#FF0000><strong>delete 对比 truncate</strong>  [面试题]</font> </p><blockquote><ol><li><p>delete 可以加where 条件，truncate不能加</p></li><li><p>truncate删除，效率高一丢丢</p></li><li><p>假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始，而truncate删除后，再插入数据，自增长列的值从1开始。</p></li><li><p>truncate删除没有返回值，delete删除有返回值</p></li><li><p>truncate删除不能回滚，delete删除可以回滚.</p></li></ol></blockquote><h2 id="4-DDL语言"><a href="#4-DDL语言" class="headerlink" title="4. DDL语言"></a>4. DDL语言</h2><p>数据定义语言    –&gt;   库和表的管理</p><blockquote><p>一、库的管理<br>创建、修改、删除</p><p>二、表的管理<br>创建、修改、删除</p></blockquote><p>创建： create<br>修改： alter<br>删除： drop</p><h3 id="4-1-库的管理"><a href="#4-1-库的管理" class="headerlink" title="4.1 库的管理"></a>4.1 库的管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1、库的创建<br>create database  [if not exists]库名;<br>#案例：创建库Books<br>CREATE DATABASE IF NOT EXISTS books ;<br><br>#2、库的修改<br>RENAME DATABASE books TO 新库名;<br>#更改库的字符集<br>ALTER DATABASE books CHARACTER SET gbk;<br><br>#3、库的删除<br>DROP DATABASE IF EXISTS books;<br></code></pre></td></tr></table></figure><h3 id="4-2-表的管理"><a href="#4-2-表的管理" class="headerlink" title="4.2 表的管理"></a>4.2 表的管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.表的创建 ★<br># 语法：<br>create table 表名(<br>列名 列的类型【(长度) 约束】,<br>列名 列的类型【(长度) 约束】,<br>列名 列的类型【(长度) 约束】,<br>...<br>列名 列的类型【(长度) 约束】<br>)<br># 案例：创建表Book<br>CREATE TABLE book(<br>id INT,#编号<br>bName VARCHAR(20),#图书名<br>price DOUBLE,#价格<br>authorId  INT,#作者编号<br>publishDate DATETIME#出版日期<br>);<br>DESC book;<br>#案例：创建表author<br>CREATE TABLE IF NOT EXISTS author(<br>id INT,<br>au_name VARCHAR(20),<br>nation VARCHAR(10)<br>)<br>DESC author;<br><br><br># 2.表的修改<br># 语法<br>alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;<br># ① 修改列名<br>ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;<br># ② 修改列的类型或约束<br>ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;<br># ③ 添加新列<br>ALTER TABLE author ADD COLUMN annual DOUBLE; <br># ④ 删除列<br>ALTER TABLE book_author DROP COLUMN  annual;<br># ⑤ 修改表名<br>ALTER TABLE author RENAME TO book_author;<br><br><br># 3.表的删除<br>DROP TABLE IF EXISTS book_author;<br>SHOW TABLES;<br># 通用的写法：<br>DROP DATABASE IF EXISTS 旧库名;<br>CREATE DATABASE 新库名;<br>DROP TABLE IF EXISTS 旧表名;<br>CREATE TABLE  表名();<br><br><br># 4.表的复制<br>INSERT INTO author VALUES<br>(1,&#39;村上春树&#39;,&#39;日本&#39;),<br>(2,&#39;莫言&#39;,&#39;中国&#39;),<br>(3,&#39;冯唐&#39;,&#39;中国&#39;),<br>(4,&#39;金庸&#39;,&#39;中国&#39;);<br><br>SELECT * FROM Author;<br>SELECT * FROM copy2;<br># 1.仅仅复制表的结构<br>CREATE TABLE copy LIKE author;<br># 2.复制表的结构+数据<br>CREATE TABLE copy2 <br>SELECT * FROM author;<br><br># 只复制部分数据<br>CREATE TABLE copy3<br>SELECT id,au_name<br>FROM author <br>WHERE nation&#x3D;&#39;中国&#39;;<br><br># 仅仅复制某些字段<br>CREATE TABLE copy4 <br>SELECT id,au_name<br>FROM author<br>WHERE 0;<br></code></pre></td></tr></table></figure><h3 id="4-3-数据类型"><a href="#4-3-数据类型" class="headerlink" title="4.3 数据类型"></a>4.3 数据类型</h3><blockquote><p>  常见的数据类型</p><ul><li>数值型：<ul><li>整型</li><li>小数：<pre><code>- 定点数</code></pre><ul><li>浮点数</li></ul></li></ul></li><li>字符型：<ul><li>较短的文本：char、varchar</li><li>较长的文本：text、blob（较长的二进制数据）</li></ul></li><li>日期型</li></ul></blockquote><p><strong>整型</strong></p><ul><li><p>分类：<br>tinyint、smallint、mediumint、int/integer、bigint<br>1              2               3                     4                     8</p></li><li><p>特点：<br>① 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned关键字<br>② 如果插入的数值超出了整型的范围,会报out of range异常，并且插入临界值<br>③ 如果不设置长度，会有默认的长度<br>长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用！</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 如何设置无符号和有符号<br>DROP TABLE IF EXISTS tab_int;<br>CREATE TABLE tab_int(<br>t1 INT(7) ZEROFILL,<br>t2 INT(7) ZEROFILL,<br>    t3 INT UNSIGNED<br><br>);<br>DESC tab_int;<br><br><br>INSERT INTO tab_int VALUES(-123456);<br>INSERT INTO tab_int VALUES(-123456,-123456);<br>INSERT INTO tab_int VALUES(2147483648,4294967296);<br>INSERT INTO tab_int VALUES(123,123);<br>SELECT * FROM tab_int;<br></code></pre></td></tr></table></figure><p><strong>小数</strong></p><ul><li><p>分类：</p><ol><li>浮点型<br>float(M,D)<br>double(M,D)</li><li>定点型<br>dec(M，D)<br>decimal(M,D)</li></ol></li><li><p>特点：</p><p>①<br>M：整数部位+小数部位<br>D：小数部位<br>如果超过范围，则插入临界值</p><p>②<br>M和D都可以省略<br>如果是decimal，则M默认为10，D默认为0<br>如果是float和double，则会根据插入的数值的精度来决定精度</p><p>③</p><p>定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</p></li><li><p>原则：</p><p>所选择的类型越简单越好，能保存数值的类型越小越好</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#测试M和D<br>CREATE TABLE tab_float(<br>f1 FLOAT,<br>f2 DOUBLE,<br>f3 DECIMAL<br>);<br>SELECT * FROM tab_float;<br>DESC tab_float;<br><br>INSERT INTO tab_float VALUES(123.4523,123.4523,123.4523);<br>INSERT INTO tab_float VALUES(123.456,123.456,123.456);<br>INSERT INTO tab_float VALUES(123.4,123.4,123.4);<br>INSERT INTO tab_float VALUES(1523.4,1523.4,1523.4);<br></code></pre></td></tr></table></figure><p><strong>字符型</strong></p><ul><li><p>较短的文本：</p><p>char  varchar</p></li><li><p>其他：</p><p>binary和varbinary用于保存较短的二进制<br>enum用于保存枚举<br>set用于保存集合</p></li><li><p>较长的文本：<br>text<br>blob(较大的二进制)</p></li><li><p>char/varchar 对比</p></li></ul><table><thead><tr><th></th><th>写法</th><th>M的意思</th><th>特点</th><th>空间的耗费</th><th>效率</th></tr></thead><tbody><tr><td>char</td><td>char(M)</td><td>最大的字符数，可以省略，默认为1</td><td>固定长度的字符</td><td>比较耗费</td><td>高</td></tr><tr><td>varchar</td><td>varchar(M)</td><td>最大的字符数，不可以省略</td><td>可变长度的字符</td><td>比较节省</td><td>低</td></tr></tbody></table><ul><li>enum和set不区分大小写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE tab_char(<br>c1 ENUM(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)<br>);<br>INSERT INTO tab_char VALUES(&#39;a&#39;);<br>INSERT INTO tab_char VALUES(&#39;b&#39;);<br>INSERT INTO tab_char VALUES(&#39;c&#39;);<br>INSERT INTO tab_char VALUES(&#39;m&#39;);<br>INSERT INTO tab_char VALUES(&#39;A&#39;);<br>SELECT * FROM tab_char;<br><br>CREATE TABLE tab_set(<br>s1 SET(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;)<br>);<br>INSERT INTO tab_set VALUES(&#39;a&#39;);<br>INSERT INTO tab_set VALUES(&#39;A,B&#39;);<br>INSERT INTO tab_set VALUES(&#39;a,c,d&#39;);<br></code></pre></td></tr></table></figure></li></ul><p><strong>日期型</strong></p><ul><li>分类：<br>date只保存日期<br>time 只保存时间<br>year只保存年</li></ul><p>datetime保存日期+时间<br>timestamp保存日期+时间</p><table><thead><tr><th></th><th>写法</th><th>范围</th><th>时区等的影响</th></tr></thead><tbody><tr><td>datetime</td><td>8</td><td>1000-9999</td><td>不受</td></tr><tr><td>timestamp</td><td>4</td><td>1970-2038</td><td>受</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE tab_date(<br>t1 DATETIME,<br>t2 TIMESTAMP<br>);<br>INSERT INTO tab_date VALUES(NOW(),NOW());<br>SELECT * FROM tab_date;<br><br># 查看当前时区<br>SHOW VARIABLES LIKE &#39;time_zone&#39;;<br># 更改时区<br>SET time_zone&#x3D;&#39;+9:00&#39;;<br></code></pre></td></tr></table></figure><h3 id="4-4-常见约束"><a href="#4-4-常见约束" class="headerlink" title="4.4 常见约束"></a>4.4 常见约束</h3><ul><li><p>含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性</p></li><li><p>分类：六大约束</p><ul><li><p>NOT NULL：<strong>非空</strong>，用于保证该字段的值不能为空</p><pre><code>比如姓名、学号等</code></pre></li><li><p>DEFAULT：<strong>默认</strong>，用于保证该字段有默认值</p><pre><code>比如性别</code></pre></li><li><p>PRIMARY KEY：<strong>主键</strong>，用于保证该字段的值具有<strong>唯一性</strong>，并且<strong>非空</strong></p><pre><code>比如学号、员工编号等</code></pre></li><li><p>UNIQUE：<strong>唯一</strong>，用于保证该字段的值具有<strong>唯一性</strong>，可以为空</p><pre><code>比如座位号</code></pre></li><li><p>CHECK：检查约束【mysql中不支持】</p><pre><code>比如年龄、性别</code></pre></li><li><p>FOREIGN KEY：<strong>外键</strong>，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值</p><p>​    在<strong>从表添加外键约束</strong>，用于<strong>引用主表</strong>中某列的值<br>​    比如学生表的专业编号，员工表的部门编号，员工表的工种编号<br>​    </p></li></ul></li><li><p>添加约束的时机：</p><pre><code>1.创建表时2.修改表时</code></pre></li><li><p>约束的添加分类：</p><ul><li>列级约束：<br>六大约束语法上都支持，但外键约束没有效果        </li><li>表级约束：<br>除了非空、默认，其他的都支持<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段名 字段类型 列级约束,<br>字段名 字段类型,<br>表级约束<br>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>​    </p><ul><li><font color=#FF0000>主键和唯一的对比【面试题】</font> </li></ul><table><thead><tr><th></th><th>保证唯一性</th><th>是否允许为空</th><th>一个表中可以有多少个</th><th>是否允许组合</th></tr></thead><tbody><tr><td>主键</td><td>√</td><td>×</td><td>至多有1个</td><td>√，但不推荐</td></tr><tr><td>唯一</td><td>√</td><td>√</td><td>可以有多个</td><td>√，但不推荐</td></tr></tbody></table><ul><li>外键<ul><li>要求在从表设置外键关系</li><li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</li><li>主表的关联列必须是一个key（一般是主键或唯一）</li><li>插入数据时，先插入主表，再插入从表；删除数据时，先删除从表，再删除主表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 一、创建表时添加约束<br># 1.添加列级约束<br>&#x2F;*<br>语法：<br>直接在字段名和类型后面追加 约束类型即可。<br>只支持：默认、非空、主键、唯一<br>*&#x2F;<br>USE students;<br>DROP TABLE stuinfo;<br>CREATE TABLE stuinfo(<br>id INT PRIMARY KEY,#主键<br>stuName VARCHAR(20) NOT NULL UNIQUE,#非空<br>gender CHAR(1) CHECK(gender&#x3D;&#39;男&#39; OR gender &#x3D;&#39;女&#39;),#检查<br>seat INT UNIQUE,#唯一<br>age INT DEFAULT  18,#默认约束<br>majorId INT REFERENCES major(id)#外键(这里外键无效)<br><br>);<br><br>CREATE TABLE major(<br>id INT PRIMARY KEY,<br>majorName VARCHAR(20)<br>);<br><br>#查看stuinfo中的所有索引，包括主键、外键、唯一<br>SHOW INDEX FROM stuinfo;<br><br><br># 2.添加表级约束<br>&#x2F;*<br>语法：在各个字段的最下面<br> 【constraint 约束名】 约束类型(字段名) <br>*&#x2F;<br>DROP TABLE IF EXISTS stuinfo;<br>CREATE TABLE stuinfo(<br>id INT,<br>stuname VARCHAR(20),<br>gender CHAR(1),<br>seat INT,<br>age INT,<br>majorid INT,<br><br>CONSTRAINT pk PRIMARY KEY(id),#主键<br>CONSTRAINT uq UNIQUE(seat),#唯一键<br>CONSTRAINT ck CHECK(gender &#x3D;&#39;男&#39; OR gender  &#x3D; &#39;女&#39;),#检查<br>CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键<br><br>);<br><br>SHOW INDEX FROM stuinfo;<br><br><br># 通用的写法：★<br>CREATE TABLE IF NOT EXISTS stuinfo(<br>id INT PRIMARY KEY,<br>stuname VARCHAR(20),<br>sex CHAR(1),<br>age INT DEFAULT 18,<br>seat INT UNIQUE,<br>majorid INT,<br>CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)<br><br>);<br><br><br># 二、修改表时添加约束<br>&#x2F;*<br>1. 添加列级约束<br>alter table 表名 modify column 字段名 字段类型 新约束;<br>2. 添加表级约束<br>alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;<br>*&#x2F;<br>DROP TABLE IF EXISTS stuinfo;<br>CREATE TABLE stuinfo(<br>id INT,<br>stuname VARCHAR(20),<br>gender CHAR(1),<br>seat INT,<br>age INT,<br>majorid INT<br>)<br>DESC stuinfo;<br><br># 1.添加非空约束<br>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;<br># 2.添加默认约束<br>ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;<br># 3.添加主键<br># ①列级约束<br>ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;<br># ②表级约束<br>ALTER TABLE stuinfo ADD PRIMARY KEY(id);<br># 4.添加唯一<br># ①列级约束<br>ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;<br># ②表级约束<br>ALTER TABLE stuinfo ADD UNIQUE(seat);<br># 5.添加外键<br>ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); <br><br><br># 三、修改表时删除约束<br># 1.删除非空约束<br>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;<br># 2.删除默认约束<br>ALTER TABLE stuinfo MODIFY COLUMN age INT ;<br># 3.删除主键<br>ALTER TABLE stuinfo DROP PRIMARY KEY;<br># 4.删除唯一<br>ALTER TABLE stuinfo DROP INDEX seat;<br># 5.删除外键<br>ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;<br><br>SHOW INDEX FROM stuinfo;<br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>自增长列(标识列）</p><ul><li><p>含义：可以不用手动的插入值，系统提供默认的序列值</p></li><li><p>特点：</p><blockquote><p>1、标识列必须和主键搭配吗？不一定，但要求是一个key<br>2、一个表可以有几个标识列？<strong>至多一个</strong>！<br>3、标识列的类型只能是数值型<br>4、标识列可以通过 <code>SET auto_increment_increment=3;</code>设置步长<br>可以通过 手动插入值，设置起始值</p></blockquote></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.创建表时设置标识列<br>DROP TABLE IF EXISTS tab_identity;<br>CREATE TABLE tab_identity(<br>id INT,<br>NAME FLOAT UNIQUE AUTO_INCREMENT,<br>seat INT <br>);<br>TRUNCATE TABLE tab_identity;<br><br>INSERT INTO tab_identity(id,NAME) VALUES(NULL,&#39;john&#39;);<br>INSERT INTO tab_identity(NAME) VALUES(&#39;lucy&#39;);<br>SELECT * FROM tab_identity;<br><br># 查看自增长相关变量<br>SHOW VARIABLES LIKE &#39;%auto_increment%&#39;;<br># 设置自增长步长(一般要进行修改)<br>SET auto_increment_increment&#x3D;3;<br><br># 2.修改表时设置标识列<br>ALTER TABLE tab_identity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;<br><br># 3.修改表时删除标识列<br>ALTER TABLE tab_identity MODIFY COLUMN id INT;<br></code></pre></td></tr></table></figure><h2 id="5-TCL语言"><a href="#5-TCL语言" class="headerlink" title="5. TCL语言"></a>5. TCL语言</h2><p>Transaction Control Language 事务控制语言</p><h3 id="5-1-事务的含义"><a href="#5-1-事务的含义" class="headerlink" title="5.1 事务的含义"></a>5.1 事务的含义</h3><blockquote><p><strong>事务</strong>：<br>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p></blockquote><h3 id="5-2-事务的特点"><a href="#5-2-事务的特点" class="headerlink" title="5.2 事务的特点"></a>5.2 事务的特点</h3><p><font color=#FF0000>事务的特性：ACID  [面试题]</font>  </p><ul><li>原子性：一个事务不可再分割，要么都执行要么都不执行.</li><li>一致性：一个事务执行会使数据从一个一致状态切换到另外一个一致状态.</li><li>隔离性：一个事务的执行不受其他事务的干扰.</li><li>持久性：一个事务一旦提交，则会永久的改变数据库的数据.</li></ul><blockquote><p>存储引擎:</p><ol><li>概念: 在mysql中的数据用各种不同的技术存储在文件(或者内存)中.</li><li>通过<code>show engines;</code>来查看mysql支持的存储引擎.</li><li>在mysql中用的最多的存储引擎有: innodb, myisam, memory等. 其中innodb支持事务,而myisam和memory不支持事务.</li></ol></blockquote><h3 id="5-3-事务的使用"><a href="#5-3-事务的使用" class="headerlink" title="5.3 事务的使用"></a>5.3 事务的使用</h3><ul><li><p>事务的创建</p><ul><li><p>隐式事务：事务没有明显的开启和结束的标记<br>比如insert、update、delete语句</p><p>​    delete from 表 where id =1;</p></li><li><p>显式事务：事务具有明显的开启和结束的标记<br>前提：必须先设置自动提交功能为禁用<code>set autocommit=0;</code></p></li></ul></li></ul><ul><li><p>显式事务的使用</p><p>① 开启事务<br>set autocommit=0;<br>start transaction;#可以省略</p><p>② 编写一组逻辑sql语句<br>注意：sql语句支持的是insert、update、delete</p><p>设置回滚点：<br>savepoint 回滚点名;</p><p>③ 结束事务<br>提交：commit;<br>回滚：rollback;<br>回滚到指定的地方：rollback to 回滚点名;</p></li></ul><h3 id="5-4-并发事务"><a href="#5-4-并发事务" class="headerlink" title="5.4 并发事务"></a>5.4 并发事务</h3><ul><li><p>事务的并发问题是如何发生的？</p><p>​    多个事务 同时 操作 同一个数据库的相同数据时</p></li><li><p><font color=#FF0000>并发问题都有哪些？</font> </p><ul><li><strong>脏读</strong>：一个事务读取了其他事务还没有提交的数据，读到的是其他事务“更新”的数据</li><li><strong>不可重复读</strong>：一个事务多次读取，结果不一样</li><li><strong>幻读</strong>：一个事务读取了其他事务还没有提交的数据，只是读到的是其他事务“插入”的数据</li></ul></li><li><p>如何解决并发问题</p><p>​    通过设置隔离级别来解决并发问题</p></li><li><p><font color=#FF0000>事务的隔离级别</font>  </p></li></ul><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted: 读未提交</td><td>×</td><td>×</td><td>×</td></tr><tr><td>read committed: 读已提交</td><td>√</td><td>×</td><td>×</td></tr><tr><td>repeatable read: 可重复读</td><td>√</td><td>√</td><td>×</td></tr><tr><td>serializable: 串行化 (每次读都需获得表级共享锁，读写相互都会阻塞,性能低下)</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># mysql中默认 第三个隔离级别 <br>repeatable read<br># oracle中默认第二个隔离级别 <br>read committed<br># 查看隔离级别<br>select @@tx_isolation;<br># 设置隔离级别<br>set session|global transaction isolation level 隔离级别;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1.演示事务的使用步骤<br># 开启事务<br>SET autocommit&#x3D;0;<br>START TRANSACTION;<br># 编写一组事务的语句<br>UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;张无忌&#39;;<br>UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;赵敏&#39;;<br># 结束事务<br>ROLLBACK; # commit;<br>SELECT * FROM account;<br><br>#2.演示事务对于delete和truncate的处理的区别<br>SET autocommit&#x3D;0;<br>START TRANSACTION;<br>DELETE FROM account;<br>ROLLBACK;<br><br>#3.演示savepoint 的使用<br>SET autocommit&#x3D;0;<br>START TRANSACTION;<br>DELETE FROM account WHERE id&#x3D;25;<br>SAVEPOINT a;#设置保存点<br>DELETE FROM account WHERE id&#x3D;28;<br>ROLLBACK TO a;#回滚到保存点<br>SELECT * FROM account;<br></code></pre></td></tr></table></figure><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h2><h3 id="6-1-视图"><a href="#6-1-视图" class="headerlink" title="6.1 视图"></a>6.1 视图</h3><blockquote><p><strong>含义</strong>：虚拟表，和普通表一样使用<br>mysql5.1版本出现的新特性，是通过表动态生成的数据, <strong>只保存了sql逻辑</strong>, 不保存查询结果</p></blockquote><ul><li><p>应用场景:</p><ul><li>多个地方用到相同的查询结果</li><li>该查询结果使用的sql语句比较复杂</li></ul></li><li><p>好处：</p><ul><li>重用sql语句</li><li>简化复杂的sql操作，不必知道它的查询细节</li><li>保护数据，提高安全性（只提供对方需要的信息）</li></ul></li><li><p>视图的创建</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 示例：查询姓张的学生名和专业名<br># 1.原始sql语句<br>SELECT stuname,majorname<br>FROM stuinfo s<br>INNER JOIN major m ON s.&#96;majorid&#96;&#x3D; m.&#96;id&#96;<br>WHERE s.&#96;stuname&#96; LIKE &#39;张%&#39;;<br># 2.①创建视图<br>CREATE VIEW v1<br>AS<br>SELECT stuname,majorname<br>FROM stuinfo s<br>INNER JOIN major m ON s.&#96;majorid&#96;&#x3D; m.&#96;id&#96;;<br># 2.②使用视图简化原始sql语句<br>SELECT * FROM v1 WHERE stuname LIKE &#39;张%&#39;;<br></code></pre></td></tr></table></figure><ul><li>视图的修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式一：<br>&#x2F;*<br>create or replace view  视图名<br>as<br>查询语句;<br>*&#x2F;<br>SELECT * FROM myv3 <br>CREATE OR REPLACE VIEW myv3<br>AS<br>SELECT AVG(salary),job_id<br>FROM employees<br>GROUP BY job_id;<br><br>#方式二：<br>&#x2F;*<br>语法：<br>alter view 视图名<br>as <br>查询语句;<br>*&#x2F;<br>ALTER VIEW myv3<br>AS<br>SELECT * FROM employees;<br></code></pre></td></tr></table></figure><ul><li>删除视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：drop view 视图名,视图名,...;<br>DROP VIEW emp_v1,emp_v2,myv3;<br></code></pre></td></tr></table></figure><ul><li>查看视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC myv3;<br>SHOW CREATE VIEW myv3;<br></code></pre></td></tr></table></figure><ul><li>更新视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo图床</title>
    <link href="/2021/03/07/PicGo/"/>
    <url>/2021/03/07/PicGo/</url>
    
    <content type="html"><![CDATA[<h1 id="PicGo图床"><a href="#PicGo图床" class="headerlink" title="PicGo图床"></a>PicGo图床</h1><h2 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1. 下载PicGo"></a>1. 下载PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><h2 id="2-安装PicGo"><a href="#2-安装PicGo" class="headerlink" title="2. 安装PicGo"></a>2. 安装PicGo</h2><p>直接运行.exe</p><h2 id="3-新建一个github仓库"><a href="#3-新建一个github仓库" class="headerlink" title="3. 新建一个github仓库"></a>3. 新建一个github仓库</h2><p>mycdn</p><h2 id="4-生成token"><a href="#4-生成token" class="headerlink" title="4.生成token"></a>4.生成token</h2><p>[进入github] -&gt; [点击头像] -&gt; [settings] -&gt; [Developers settings] -&gt; [Personal access token]</p><blockquote><p> 必须勾选repo</p></blockquote><p>生成后必须复制token，只显示一次</p><blockquote><p>0cb447c7cb66f97f8dd645d1b30f88b3bda94198</p></blockquote><h2 id="5-配置PicGo"><a href="#5-配置PicGo" class="headerlink" title="5. 配置PicGo"></a>5. 配置PicGo</h2><p>打开PicGo左栏依次选择[图床设置] -&gt; [github图床]</p><p>格式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">仓库名： 你的用户名/仓库名<br>分支： main<br>Token： <span class="hljs-number">0</span>cb447c7cb66f97f8dd645d1b30f88b3bda94198<br>存储路径： img/  <span class="hljs-comment"># 表示上传到你的仓库的img目录下</span><br>自定义域名格式： https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>LihengXu/mycdn<br></code></pre></td></tr></table></figure><p>因为github的服务器在国外，所以用来当图床的时候，国内的速度非常感人，但是我们可以使用<code>jsdelivr</code>提供的CDN服务，速度非常的快，基本不大的图片可以秒开。</p><p>所以上述<strong>自定义域名</strong>实际上是使用的<code>jsdelivr</code>的CDN服务。</p><h2 id="6-上传图片"><a href="#6-上传图片" class="headerlink" title="6. 上传图片"></a>6. 上传图片</h2><p>点击上传区，选择github图床</p><p>示例</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/myfig.png"></p>]]></content>
    
    
    <categories>
      
      <category>PicGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PicGo</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO框架搭建个人博客</title>
    <link href="/2020/08/21/hexo%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/08/21/hexo%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="HEXO框架搭建个人博客"><a href="#HEXO框架搭建个人博客" class="headerlink" title="HEXO框架搭建个人博客"></a>HEXO框架搭建个人博客</h1><h2 id="一、-环境搭建"><a href="#一、-环境搭建" class="headerlink" title="一、 环境搭建"></a>一、 环境搭建</h2><h3 id="1-nodejs安装"><a href="#1-nodejs安装" class="headerlink" title="1. nodejs安装"></a>1. nodejs安装</h3><h4 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h4><p>下载地址（选择<strong>LTS</strong>稳定版）：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><blockquote><p>下载之后直接默认安装，一路next（建议不要放在C盘）</p></blockquote><h4 id="1-2-测试nodejs"><a href="#1-2-测试nodejs" class="headerlink" title="1.2 测试nodejs"></a>1.2 测试nodejs</h4><p>打开windows的命令行工具输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br></code></pre></td></tr></table></figure><p>显示版本号则安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_1_%E6%B5%8B%E8%AF%95nodejs%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h4 id="1-3-测试npm"><a href="#1-3-测试npm" class="headerlink" title="1.3 测试npm"></a>1.3 测试npm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> npm是nodejs安装时默认安装的</span><br><span class="hljs-meta">#</span><span class="bash"> 直接在windows的命令行工具输入</span><br>npm -v<br></code></pre></td></tr></table></figure><p>显示如下则安装成功, npm管理工具用于安装Hexo框架</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_2_%E6%B5%8B%E8%AF%95npm%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h4 id="1-4-安装nrm（需要一点耐心）"><a href="#1-4-安装nrm（需要一点耐心）" class="headerlink" title="1.4 安装nrm（需要一点耐心）"></a>1.4 安装nrm（需要一点耐心）</h4><blockquote><p> nrm的安装原因：需要切换下载源到国内镜像源，提升下载速度</p></blockquote><ul><li>默认npm的全局安装路径在C盘，我们需要修改到nodejs的安装目录，新建两个文件夹: <code>node_global_modules</code> 和 <code>node_cache</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_3_%E4%BF%AE%E6%94%B9npm%E9%BB%98%E8%AE%A4%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84.png"></p><ul><li><p>在命令行执行以下两条命令修改npm配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set prefix &quot;D:\Java\nodejs\node_modules\npm\node_global_modules&quot;<br>npm config set cache &quot;D:\Java\nodejs\node_modules\npm\node_cache&quot;<br></code></pre></td></tr></table></figure></li><li><p>执行后输入以下命令，查看npm配置结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config ls<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_4_npm%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png"></p><ul><li>验证配置成功后，需要配置环境变量。在环境变量中，新建一个系统变量，变量名：<code>NODE_HOME</code>，变量值：<code>D:\dev\nodejs</code>，效果如图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_5_%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FNODE_HOME.png"></p><ul><li><p>在系统环境变量<code>Path</code>变量名中，新建变量值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash">NODE_HOME%</span><br><span class="hljs-meta">%</span><span class="bash">NOED_HOME%\node_modules</span><br><span class="hljs-meta">%</span><span class="bash">NODE_HOME%\node_modules\npm\node_global_modules\</span><br></code></pre></td></tr></table></figure></li></ul><p>效果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_6_%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%88%B0path.png"></p><ul><li><p>保存后重新打开命令行工具，执行性全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install nrm -g<br></code></pre></td></tr></table></figure><p>安装结束后如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_7_nrm%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png"></p></li><li><p>在命令行输入指令查看下载源，可能会报错如下图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm ls<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_8_nrm%E6%8A%A5%E9%94%99.png"></p></li><li><p>找到nrm目录(错误第四行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">at Object.&lt;anonymous&gt; (D:\Java\nodejs\node_modules\npm\node_global_modules\node_modules\nrm\cli.js:17:20)<br></code></pre></td></tr></table></figure></li><li><p>打开cli.js 第17行修改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//const NRMRC = path.join(process.env.HOME, &#x27;.nrmrc&#x27;); (删除)</span><br><span class="hljs-keyword">const</span> NRMRC = path.join(process.env[(process.platform == <span class="hljs-string">&#x27;win32&#x27;</span>) ? <span class="hljs-string">&#x27;USERPROFILE&#x27;</span> : <span class="hljs-string">&#x27;HOME&#x27;</span>], <span class="hljs-string">&#x27;.nrmrc&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>重新输入<code>nrm ls</code>查看下载源</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_9_%E6%9F%A5%E7%9C%8Bnrm%E4%B8%8B%E8%BD%BD%E6%BA%90.png"></p></li><li><p>修改下载源指令，推荐选择taobao</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm use taobao # 选择淘宝<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-安装Hexo框架"><a href="#2-安装Hexo框架" class="headerlink" title="2. 安装Hexo框架"></a>2. 安装Hexo框架</h3><h4 id="2-1-安装hexo-cli脚手架"><a href="#2-1-安装hexo-cli脚手架" class="headerlink" title="2.1 安装hexo-cli脚手架"></a>2.1 安装hexo-cli脚手架</h4><p>打开命令行输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装成功如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_10_hexo-cli%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png"></p><h4 id="2-2-验证hexo-cli安装成功"><a href="#2-2-验证hexo-cli安装成功" class="headerlink" title="2.2 验证hexo-cli安装成功"></a>2.2 验证hexo-cli安装成功</h4><p>命令行输入测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_11_hexo-cli%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85.png"></p><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3. 安装Git"></a>3. 安装Git</h3><p>具体可以参考我的<a href="https://lihengxu.github.io/2020/08/21/gitstudy/">Git总结</a></p><h2 id="二、使用Hexo搭建博客"><a href="#二、使用Hexo搭建博客" class="headerlink" title="二、使用Hexo搭建博客"></a>二、使用Hexo搭建博客</h2><h3 id="1-创建项目文件夹"><a href="#1-创建项目文件夹" class="headerlink" title="1. 创建项目文件夹"></a>1. 创建项目文件夹</h3><p>在本地硬盘创建并进入项目文件夹（blog），并在该文件夹下打开命令行工具</p><h3 id="2-初始化blog项目"><a href="#2-初始化blog项目" class="headerlink" title="2. 初始化blog项目"></a>2. 初始化blog项目</h3><p>使用hexo命令初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><p>初始化项目文件如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_12_blog%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%87%E4%BB%B6.png"></p><h3 id="3-运行hexo服务预览博客"><a href="#3-运行hexo服务预览博客" class="headerlink" title="3. 运行hexo服务预览博客"></a>3. 运行hexo服务预览博客</h3><p>在当前路径下输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><p>命令行出现访问路径，直接点击访问即可</p><p>默认样式如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/hexo%E6%90%AD%E5%BB%BA_13_hexo%E5%8D%9A%E5%AE%A2%E9%A2%84%E8%A7%88.png"></p><h3 id="4-创建文章"><a href="#4-创建文章" class="headerlink" title="4. 创建文章"></a>4. 创建文章</h3><p>在当前路径下输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo n &#x27;hexo test&#x27;<br></code></pre></td></tr></table></figure><p>回车后出现以标题命名的.md文件路径，打开该文件编辑文章内容</p><h3 id="5-更新文章"><a href="#5-更新文章" class="headerlink" title="5. 更新文章"></a>5. 更新文章</h3><p>命令行输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean # 清理缓存<br>hexo g # 解析生成<br>hexo s # 运行hexo服务预览博客<br></code></pre></td></tr></table></figure><h2 id="三、-博客部署到GitHub"><a href="#三、-博客部署到GitHub" class="headerlink" title="三、 博客部署到GitHub"></a>三、 博客部署到GitHub</h2><h3 id="1-登陆GitHub创建仓库"><a href="#1-登陆GitHub创建仓库" class="headerlink" title="1. 登陆GitHub创建仓库"></a>1. 登陆GitHub创建仓库</h3><p>创建仓库命：LihengXu.github.io (注意第一个.前面一定是账户名)</p><h3 id="2-在本地目录安装git部署插件"><a href="#2-在本地目录安装git部署插件" class="headerlink" title="2. 在本地目录安装git部署插件"></a>2. 在本地目录安装git部署插件</h3><p>在项目根目录下打开命令行工具输入如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-deployer-git # --save 表示只在本目录下安装<br></code></pre></td></tr></table></figure><h3 id="3-修改项目根目录下的配置文件"><a href="#3-修改项目根目录下的配置文件" class="headerlink" title="3. 修改项目根目录下的配置文件"></a>3. 修改项目根目录下的配置文件</h3><p>找到<code>_config.yaml</code>文件</p><p>找到最下面的<code>deploy：type</code> 进行编辑:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/LihengXu/LihengXu.github.io.git</span> <br>  <span class="hljs-comment"># repo : github上创建的仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h3 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4. 部署到GitHub"></a>4. 部署到GitHub</h3><p>项目根目录下打开命令行输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure><p>提示你输入GitHub账户和密码后将代码提交到GitHub仓库</p><p>通过<a href="https://lihengxu.github.io/">GitHub链接</a>可访问博客</p><h2 id="四、-更换主题"><a href="#四、-更换主题" class="headerlink" title="四、 更换主题"></a>四、 更换主题</h2><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1. 下载主题"></a>1. 下载主题</h3><p>将主题文件下载到本地项目的<code>theme</code>文件夹</p><p>在本地项目根目录下打开命令行输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><h3 id="2-修改配置-config-yml"><a href="#2-修改配置-config-yml" class="headerlink" title="2. 修改配置 _config.yml"></a>2. 修改配置 _config.yml</h3><p>找到<code>#Extensions</code>项的theme</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p><a href="https://hexo.fluid-dev.com/docs/start/">fluid主题使用指南</a>，可以进一步自定义更多设置</p><h3 id="3-更新并重新部署"><a href="#3-更新并重新部署" class="headerlink" title="3. 更新并重新部署"></a>3. 更新并重新部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean # 清理缓存<br>hexo g # 解析生成<br>hexo s # 运行hexo服务预览<br>hexo d # 部署到github<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用</title>
    <link href="/2020/08/21/gitstudy/"/>
    <url>/2020/08/21/gitstudy/</url>
    
    <content type="html"><![CDATA[<h1 id="Git初步使用"><a href="#Git初步使用" class="headerlink" title="Git初步使用"></a>Git初步使用</h1><p><strong>前言</strong>：用了比较长时间的github了，一直都不能把git理清楚，于是决定整理一下git的学习笔记，供自己梳理和回顾。</p><p><strong>说明</strong>：这里思路是B站up狂神的git教学<a href="https://www.bilibili.com/video/BV1FE411P7B3?p=1">狂神聊Git</a>，给大家安利一下这个up，他许多视频都很不错。</p><hr><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><blockquote><p><strong>版本控制</strong>  版本迭代的版本管理器(Revision control)</p></blockquote><p>尤其在多人开发中，使用版本控制尤为重要</p><blockquote><p><strong>常见的版本控制工具</strong></p></blockquote><p>主流的版本控制器有：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong> (subversion)</li><li><strong>CVS</strong> (Concurrent Version System)</li><li><strong>VSS</strong> (Micorosoft Visual SourceSafe)</li><li><strong>TFS</strong> (Team Foudation Server)</li><li>Visual Studio Online</li></ul><p>现在影响力最大也是使用最广泛的是<strong>Git</strong>和<strong>SVN</strong></p><blockquote><p><strong>版本控制分类</strong></p></blockquote><ol><li><p><strong>本地版本控制</strong></p><p>记录文件每次更新，可以对每个版本做一个快照，或者是记录补丁文件，适用于个人，如RCS。</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_1_%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.png"></p></li><li><p><strong>集中版本控制</strong></p><p>所有版本数据都保存在服务器上，协同开发者从服务器上同步更新或者上传自己的修改。</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_2_%E9%9B%86%E4%B8%AD%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.png"></p><p>所有的版本数据保存在服务器上，用户本地只有自己的以前所同步的版本，如果不联网，用户看不到历史版本，也午饭切换版本验证问题，或者不同分支工作。而且，所有有数据都保存在单一服务器上，一旦服务器损坏就会丢失所有数据，需要定期备份。代表有：<strong>SVN CVS VSS</strong></p></li><li><p><strong>分布式版本控制</strong></p><p>所有版本星信息全部同步到本地的每一个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需要在连网时push到相应的服务器或者其他用户那里。由于每一个用户保存的都是所有的版本数据，只要有一个用户设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_3_%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.png"></p></li></ol><blockquote><p><strong>Git和SVN的区别</strong></p></blockquote><p><strong>SVN</strong>是集中式版本控制系统，版本库集中放在中央服务器的，而工作的时候，用自己电脑首先要从重要服务器得到最新版本，然后工作，完成工作后需要推送到中央服务器。集中实版本控制系统必须联网才能工作，对网络带宽要求较高</p><p><strong>Git</strong>是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网，因为版本都在自己电脑上。协同方式：你在电脑上修改了文件A，其他人也修改了文件A，你们俩只需要把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到。</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><p><strong>GIt</strong>是Linux社区 (特别是Linux的缔造者<strong>Linus Torvalds</strong>) 基于使用<strong>BitKeeper</strong>时的经验教训，开发出的自己的版本系统。大约花了<strong>两周左右</strong>，也就是后来的<strong>Git</strong>。</p><p><strong>Git</strong>是免费的、开源的、最初Git是为辅助Linux内核开发的，来代替BitKeeper。</p><h2 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h2><blockquote><p><strong>Git下载</strong></p></blockquote><p>打开官网<a href="https://git-scm.com/">git官网</a>，下载git对应操作系统的版本</p><p>下载过慢就是用镜像下载<a href="http://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a></p><blockquote><p><strong>Git卸载</strong></p></blockquote><p>直接反安装即可、清理环境变量</p><blockquote><p><strong>Git安装</strong></p></blockquote><p>无脑下一步安装即可。</p><blockquote><p><strong>启动Git</strong></p></blockquote><p>安装成功后开始菜单会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_4_git%E9%80%89%E9%A1%B9.png"></p><p><strong>Git Bash</strong>:  Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD</strong>:  Windows风格的命令行</p><p><strong>GIt GUI</strong>:  图形界面的GIt，不建议初学者使用，尽量先熟悉常用的命令</p><blockquote><p><strong>基本的Linux命令</strong></p></blockquote><ol><li><p><strong>cd</strong> 改变目录</p></li><li><p><strong>cd ..</strong> 回退到上一个目录，直接cd进入默认目录</p></li><li><p><strong>pwd</strong> 显示当前目录路径</p></li><li><p><strong>ls(ll)</strong> 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更加详细</p></li><li><p><strong>touch</strong> 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p></li><li><p><strong>rm</strong> 删除一个文件，rm index.js 就会把index.js删除掉</p></li><li><p><strong>mkdir</strong> 新建一个目录，就是新建一个文件夹</p></li><li><p><strong>rm -r</strong> 删除一个文件夹，rm -r src 删除src目录</p><p>切勿随意在Linux系统中使用<strong>rm -rf /</strong> ，会从根目录全部递归删除，那么会删除电脑中全部文件。</p></li><li><p><strong>mv</strong> 移动文件，mv index.html src index.html 是我们要移动的文件，src是目标文件夹，这么写必须在同一目录下。</p></li><li><p><strong>reset</strong> 重新初始化终端/清屏</p></li><li><p><strong>clear</strong> 清屏</p></li><li><p><strong>history</strong> 查看命令历史</p></li><li><p><strong>help</strong> 帮助</p></li><li><p><strong>exit</strong> 退出</p></li><li><p>**#**表示注释</p></li></ol><blockquote><p><strong>Git配置</strong></p></blockquote><p>查看配置 <strong>git config -l</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_5_git%E9%85%8D%E7%BD%AE.png"></p><p>查看不同级别的配置文件 (都保存在本地) ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统config</span><br>git config --system --list<br><br><span class="hljs-comment"># 查看当前用户(global)配置</span><br>git config --global --list<br></code></pre></td></tr></table></figure><p><strong>Git相关的配置文件：</strong></p><ol><li>Git\etc\gitconfig : Git 安装目录下的gitconfig –system 系统级</li><li>C:\UsersAdminstrator\ .gitconfig 只适用于当前登录用户配置 –global 全局</li></ol><p>这里可以直接编辑配置文件，通过命令设置后会响应到这里</p><blockquote><p><strong>配置用户名与邮箱 (用户标识，必要)</strong></p></blockquote><p>当你安装git后首先要设置你的用户名和e-mail地址。这非常重要，每次git提交都会使用该信息。它会被永远嵌入到你的提交中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;lihengxu&quot;</span> <span class="hljs-comment"># 名称</span><br>git config --global user.email 15882320389@163.com <span class="hljs-comment"># 邮箱</span><br></code></pre></td></tr></table></figure><p>只需要设置一次，只要传递了–global选项，Git将总会使用该信息来处理你在系统中的一切处理。如果你希望在一个特定的项目中使用不同的名称或email地址，你可以在该项目运行该命令而不要–global选项。总之–global为全局配置，不加为某一个项目的特定配置。</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_6_git%E9%85%8D%E7%BD%AE--global.png"></p><h2 id="Git基本理论-核心"><a href="#Git基本理论-核心" class="headerlink" title="Git基本理论 (核心)"></a>Git基本理论 (核心)</h2><blockquote><p><strong>工作区域</strong></p></blockquote><p>Git本地有三个工作区域：</p><ol><li>工作目录(Working Direcitory)</li><li>暂存区(Stage/Index)</li><li>资源区(Repository 或 GIt Directory)</li></ol><p>如果加上远程的</p><ol start="4"><li>Git仓库(Remote Directory)</li></ol><p>就可以分为4个工作区域，转换关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_7_git%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png"></p><ul><li><strong>Workspace</strong>: 工作区，就是平时你存放项目代码的地方</li><li><strong>Index/Stage</strong>： 暂存区，用于平时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li><li><strong>Repository</strong>：仓库区(或者本地仓库)， 就是安全存放数据的位置，这里面有你提交的所有版本数据。其中HEAD指向最新放入仓库的版本。</li><li><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。</li></ul><p>本地三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_8_HEAD%E6%8C%87%E5%90%91%E7%9A%84%E7%89%88%E6%9C%AC.png"></p><ul><li><strong>Directory</strong>：使用GIt管理的目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li><strong>WorkSpace</strong>：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间</li><li><strong>.git</strong>：存放管理信息的目录，初始化仓库的时候自动创建。</li><li><strong>Index/Stage</strong>：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li><strong>Local Repo</strong>：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支(branch)。</li><li><strong>Stash</strong>：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><blockquote><p><strong>工作流程</strong></p></blockquote><p>git的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库。</li></ol><p>因此，git管理文件有三种状态：已修改(modified)、已暂存(staged)、已提交(committed)</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_9_git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><blockquote><p>创建工程目录与常用指令</p></blockquote><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你的项目的目录，也可以是一个空目录，建议不要有中文，日常使用一下图中6个命令：</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_10_git%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%85%B3%E7%B3%BB.png"></p><blockquote><p>本地仓库搭建</p></blockquote><p>创建本地仓库有两种方法：一种是创建一个全新仓库，另一种是克隆远程仓库。</p><ol><li><p>创建全新仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当前目录中新建一个Git代码库</span><br>$ git init<br></code></pre></td></tr></table></figure></li><li><p>执行后可以看到，仅仅在项目中多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p></li></ol><blockquote><p>克隆远程仓库</p></blockquote><ol><li><p>另一种方式是克隆远程目录，也就是将远程服务器上的仓库完全镜像一份到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆一个项目和它整个历史代码(版本信息)</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/LihengXu/WPS_Apolloscape.git<br></code></pre></td></tr></table></figure></li><li><p>去gitee或者github上克隆一个测试</p></li></ol><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><blockquote><p><strong>文件4种状态</strong></p></blockquote><p>版本控制就是对文件的版本控制，要对文件进行修改，提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在不想提交的文件，或者要提交的文件没有提交上。</p><ul><li><strong>Untracked</strong>：未跟踪，此文件在文件夹种，并没有加入到git库，不参与版本控制，通过<code>git add</code> 状态变为 <code>staged</code></li><li><strong>Unmodify</strong>：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中的完全一致。这种类型的文件有两种去处，如果它被修改，而变为<code>Modified</code>，如果使用<code>git rm</code>移出版本库，则成为<code>untracked</code>文件</li><li><strong>Modified</strong>：文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过<code>git add</code>可以进入暂存<code>staged</code>状态，使用<code>git checkout</code>则丢弃修改，返回到<code>Unmodify</code>状态，这个<code>git checkout</code> 即从库中取出文件，覆盖当前修改。</li><li><strong>Staged</strong>：暂存状态。执行<code>git commit</code>则将修改同步到库中，这是库中文件和本地文件右边为一致，文件为<code>Unmodify</code>状态。执行<code>git reset HEAD filename</code>取消暂存，文件状态为<code>Modified</code>。</li></ul><blockquote><p><strong>查看文件状态</strong></p></blockquote><p>上面说文件有4种状态，通过如下命令可以查看文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment"># 查看所有文件状态</span><br>git status<br><br><span class="hljs-comment"># 添加所有文件到暂存区</span><br>git add .<br><br><span class="hljs-comment"># 删除仓库中的&quot;README.en.md&quot;文件</span><br>git rm README.en.md<br><br><span class="hljs-comment"># 提交暂存区中内容到本地仓库，-m 提交信息</span><br>git commit -m <span class="hljs-string">&quot;for test&quot;</span><br><br><span class="hljs-comment"># 提交至远程仓库</span><br>git push<br></code></pre></td></tr></table></figure><blockquote><p><strong>忽略文件</strong></p></blockquote><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下面建立一个”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或者以井号(#)开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号(*)代表任意多字符，问号(?)代表一个字符，方括号([abc])代表可选字符范围，大括号({string1,string2,…})代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号(!)，表示例外规则，将不会忽略。</li><li>如果名称的最前面是一个路径分隔符(/)，表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件(默认文件或目录都忽略)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 为注释</span><br>*.txt      <span class="hljs-comment"># 忽略所有.txt结尾的文件，这样的话上传就不会被选中。</span><br>!lib.txt   <span class="hljs-comment"># 但lib.txt除外</span><br>/temp      <span class="hljs-comment"># 仅忽略根目录下的TODO文件，不包括其他目录temp</span><br>build/     <span class="hljs-comment"># 忽略build/目录下的所有文件</span><br>doc/*.txt  <span class="hljs-comment"># 会忽略doc/notes.txt但不包括doc/server/arch.txt</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通常前后端项目都需要的.gitignore的配置</span><br>*.class<br>*.<span class="hljs-built_in">log</span><br>*.lock<br><br><span class="hljs-comment"># Package Files #</span><br>*.jar<br>*.war<br>*.ear<br>target/<br><br><span class="hljs-comment"># idea</span><br>.idea/<br>*.iml<br><br>*velocity.log*<br><br><span class="hljs-comment">### STS ###</span><br>.apt_generated<br>.factorypath<br>.springBeans<br><br><span class="hljs-comment">### IntelliJ IDEA###</span><br>*.iml<br>*.ipr<br>*.iws<br>.idea<br>.classpath<br>.project<br>.settings/<br>bin/<br><br>*.<span class="hljs-built_in">log</span><br>tmp/<br><br><span class="hljs-comment">#rebel</span><br>*rebel.xml*<br></code></pre></td></tr></table></figure><h2 id="使用码云gitee"><a href="#使用码云gitee" class="headerlink" title="使用码云gitee"></a>使用码云gitee</h2><blockquote><p>国内一般使用gitee，而通常全球范围内大多都是用github，两者使用几乎一致，有些公司会自己搭建gitlab服务器</p></blockquote><ol><li><p>注册登录码云，完善个人信息，点击自己头像选设置</p></li><li><p>设置本机绑定SSH公钥，实现免密码登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入C:\Users\Administrator\.ssh目录</span><br><span class="hljs-comment"># 生成公钥，-t rsa是选择加密方式</span><br>ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_11_%E5%85%AC%E9%92%A5%E7%94%9F%E6%88%90%E7%BB%93%E6%9E%9C.png"></p></li><li><p>将公钥信息public key (打开上面的<code>.pub</code>文件，这就是公钥)添加到码云账户中即可</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_12_%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5%E5%A4%84.png"></p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_13_%E6%B7%BB%E5%8A%A0%E6%88%90%E5%8A%9F%E5%90%8E.png"></p></li><li><p>使用码云创建自己的仓库</p><p>新建仓库的位置</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_14_%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%931.png"></p><p>若公开的话有一个许可证选项：</p><p>开源是否可以随意转载，开源但是不能商用，等等各种限制协议。</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_15_%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png"></p></li><li><p>最后克隆至本地即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/lihengxu/gitstudy.git<br></code></pre></td></tr></table></figure></li></ol><h2 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a>IDEA中集成Git</h2><p> <strong>(和Pycharm基本相同)</strong></p><ol><li>新建项目，绑定git<ul><li>将远程的git文件目录直接拷贝到项目中即可，或者直接创建项目到git文件目录下</li></ul></li><li>修改文件，使用IDEA操作git<ul><li>添加到暂存区：命令行 <code>git add .</code> ；或者手动鼠标右键点文件，选GIt然后点Add</li><li>commit提交：界面右上角有一个commit选项，点击后选择，并输入一下message即可</li><li>push到远程仓库：直接在命令行中输入<code>git push</code>即可</li></ul></li><li>提交测试</li></ol><hr><p><strong>以上全部都不涉及分支，全是单人操作</strong></p><hr><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>分支类似平行宇宙的概念，适用于多人协同开发</p><p>当存在多个分支，我们进行分支合并时，可能会有冲突产生</p><p><img src="https://cdn.jsdelivr.net/gh/LihengXu/mycdn/img/gitstudy_16_git%E5%88%86%E6%94%AF%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><p>git分支中常见命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment"># 列出所偶远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch -name]<br><br><span class="hljs-comment"># 切换到该分支</span><br>git checkout [branch]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-comment"># 重命名分支</span><br>git branch -m [branch -oldname] [branch -newname]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 中止这一次提交的合并(当遇到冲突时)</span><br>$ git merge --abort<br><br><span class="hljs-comment"># 将分支变基(Rebase)到master</span><br><span class="hljs-comment"># 先切换到分支，再完成变基</span><br>$ git checkout [branch]<br>$ git rebase master<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch -name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch -name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><blockquote><p>想要形象的快速理解分支的概念，推荐一款图形化客户端<a href="https://www.gitkraken.com/">GitKraken</a></p></blockquote><blockquote><p>建议使用github账号关联登录，这里推荐<a href="https://www.bilibili.com/video/BV1KD4y1S7FL">教程</a>以及关于分支的进阶<a href="https://www.bilibili.com/video/bv1hA411v7qX/">教程</a></p></blockquote><p>注意主分支master应该非常稳定，只有分支代码稳定之后才能合并到主分支上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Git其实还是比较简单的，很多命令其实只要多用就能熟悉，尤其时分支的操作，这部分用图形界面多使用就能理解得更深刻</li><li>gitee下面有一个git大全，更多得一些插件，命令都能在里面查询。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
